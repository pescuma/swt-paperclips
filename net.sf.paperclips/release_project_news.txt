PaperClips 1.0.0 released

After fourteen months of development, we are happy to announce the 1.0 release of the PaperClips printing library.

Features and changes in this release:
* Vertical cell alignment in GridPrint, including SWT.FILL alignment to allow embedding vertically greedy prints like SWT.VERTICAL ~LinePrints.
* SidewaysPrint - a non-greedy version of RotatePrint.  Very handy for putting sideways text in grids.
* TextPrint's and PageNumberPrint's horizontally greedy behavior had to be removed in order for SidewaysPrint to work correctly.  This will not cause any compilation problems, however you may see some unexpected layout behavior.
* Updated Snippet7 (print preview example) in examples plug-in to clean up some of the odd behavior when resizing the window in Fit-to-Width or Fit-to-Height mode.  Also added code for scrolling around the page using mouse drag.
* Bug fix: PaperClips.getPages() throws the wrong exception when a document fails to lay out properly.
* Bug fix: PrintPreview does not redraw when setScale is called to change the display scale.
* Bug fix: Headers/footers in a PagePrint do not display any contents after the page number.

PaperClips is a simple, light weight, extensible printing library for SWT.  PaperClips hides the complexity of laying out and rendering documents on the printer, helping you to focus on what you want to print instead of how you're going to print it.

In a nutshell, PaperClips provides an assortment of document "building blocks", which you can tweak and combine to form a document. The assembled document is then sent to PaperClips for printing. PaperClips includes built-in support for printing text, images, borders, headers and footers, column layouts and tabular (grid) layouts.  PaperClips is designed to be extensible, so you can code your own printable document elements.

PaperClips depends on the SWT library, a project of the Eclipse Foundation. The SWT library may be downloaded from the Eclipse site: http://www.eclipse.org/swt/

Project web page: http://paperclips.sourceforge.net/
Download page: http://sourceforge.net/project/showfiles.php?group_id=148509
Subversion: https://svn.sourceforge.net/svnroot/paperclips/trunk/net.sf.paperclips/

CHANGELOG:

Version 1.0.0
* Vertical cell alignment in GridPrint, including SWT.FILL alignment to allow embedding vertically greedy prints like SWT.VERTICAL ~LinePrints.
* SidewaysPrint - a non-greedy version of RotatePrint.  Very handy for putting sideways text in grids.
* TextPrint's and PageNumberPrint's horizontally greedy behavior had to be removed in order for SidewaysPrint to work correctly.  This will not cause any compilation problems, however you may see some unexpected layout behavior.
* Updated Snippet7 (print preview example) in examples plug-in to clean up some of the odd behavior when resizing the window in Fit-to-Width or Fit-to-Height mode.  Also added code for scrolling around the page using mouse drag.
* Bug fix: PaperClips.getPages() throws the wrong exception when a document fails to lay out properly.
* Bug fix: PrintPreview does not redraw when setScale is called to change the display scale.
* Bug fix: Headers/footers in a PagePrint do not display any contents after the page number.

Version 0.6.1
* PrintPreview control:
  * ComputeSize is now implemented properly, which helps determine the proper sizing of the control depending on the viewing scale.  Snippet7 has been updated to demonstrate this feature.
  * The performance problems (read: major lags) when zooming in very close are resolved.  Go ahead, zoom to ridiculous levels with confidence!  We promise not to tell anyone.
  * Bugfix: page disappears after a call to setPrinterData.
* ColumnPrint behavior of compressing the last page of content to the minimum possible height can now be disabled using the "compressed" property.
* GridPrint now has addColumn and addColumns methods supporting column modifications after construction.  Some of the snippets were modified to use this new API.

Version 0.6.0
* JDK 1.4 compliance.
* New WYSIWYG (what you see is what you get) PrintPreview control in the net.sf.paperclips.ui plugin.
* Other existing UI controls (in the net.sf.paperclips.swt package) have been moved to the net.sf.paperclips.ui, into the net.sf.paperclips.ui package.
* The PrintUtil class has been replaced with the PaperClips and PrintJob classes.
* The new PrintJob class holds information about the job name, document, page margins, and paper orientation.
* The new PaperClips class provides a simpler API for printing documents.
* The new Margins class provides fine control over margins on each edge of the paper.
* Deprecated package net.sf.paperclips.preview has been removed.

Version 0.5.4
* Bugfix: GridPrint fails to generate last page if the final row of content finishes on previous page, but there was only enough room to print an open bottom border.  (This bug was discovered trying to run Snippet4)
* Added SimplePageDecoration, a simple wrapper for static page headers and footers.  This class can be used in lieu of creating a custom PageDecoration class for simple page numbering.
* The DefaultPageNumberFormat class (the default PageNumberFormat class used by PageNumberPrint) is now a top-level, public class.
* Added SimplePageDecoration class, a PageDecoration which displays a Print you provide on each page.

Version 0.5.3
* TextPrint - was modified to be horizontally greedy in version 0.5.2.  This behavior is not appropriate for left-aligned text (the default alignment), as it effectively negates the column alignment in a GridPrint cells.  Therefore as of 0.5.3, center- and right-aligned text is horizontally greedy, whereas left-aligned text is not.

Version 0.5.2
* CellBackgroundProvider interface - an interface for programmatic control of the background color in each grid cell.  Default implementation is provided in the DefaultBackgroundProvider class.
* DefaultGridLook - now supports control of the header, body, and footer background colors using either setHeaderBackground(RGB) or setHeaderBackgroundProvider(CellBackgroundProvider).
* Prints with greedy layout behavior now have documentation indicating the behavior in the javadocs.
* Bugfix to GridPrint which sometimes cause grids to overlap with other prints.

Version 0.5.1
* Fixed NullPointerException in GridPrint, which occurred whenever the cells in a single row do not finishing displaying their content on the same page.
* Added net.sf.paperclips.decorator package to list of exported packages in plugin descriptor.

Version 0.5.0
* ScalePrint - wrapper that scales a print down to fit on the page, or scales larger or smaller depending on a scaling factor.  Requires SWT 3.2M3 or later.
* RotatePrint - wrapper that rotates the target by 90, 180, or 270 degrees.  Since SWT doesn't provide API for setting the page orientation, this will be very useful for landscape layouts.  Requires SWT 3.2M3 or later.
* BackgroundPrint - wrapper that draws a background color behind it's target.
* BigPrint - wrapper that splits it's target across multiple pages if it's too large to fit on one.  Use this if you have a document that's too big to print (i.e. a GridPrint with too many columns).
* Decorator package (net.sf.paperclips.decorator) allows you to create decorator factories which can apply decorations to prints without explicitly calling the decorator print's constructor.  Provided you use the decorator uniformly throughout your document, the style of the document can be changed by substituting another decorator.
* TextPrint default font is the system default font instead of hard-coded "Times" font.
* Updated semantics of PrintPiece.dispose() to allow PrintPiece and BorderPainter re-use.  Anybody who writes their own Print classes should check out the javadocs for this method and update their code to comply with the new semantics.
* GridPrint can now add headers and footers that repeat on every page through the addHeader(...) and addFooter(...) methods (they work just like the add(...) methods).
* Configure the appearance of your GridPrint using the GridLook interface.  A default look, DefaultGridLook, lets you configure the cell spacing, cell border, and background color of grid cells (separate color for header, body, and footer cells).
* GridPrint public fields horizontalSpacing and verticalSpacing were deprecated.
* Fixed bug 1480013: illogical layout of grid rows when they are broken across pages.  Sometimes some content would be on the end of one page and the other content would be at the beginning of the next page.  This led to sometimes confusing printouts.  This fix essentially "glues" the row together so it doesn't get separated like this any more.