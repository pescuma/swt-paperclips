Version 0.5.2
* CellBackgroundProvider interface - an interface for programmatic control of
  the background color in each grid cell.  Default implementation is provided
  in the DefaultBackgroundProvider class.
* DefaultGridLook - now supports control of the header, body, and footer
  background colors using either setHeaderBackground(RGB) or
  setHeaderBackgroundProvider(CellBackgroundProvider).

Version 0.5.1
* GridPrint - fixed bug which caused a NullPointerException whenever the cells
  in a row are not all consumed (completely displayed) on the same page.
* Added net.sf.paperclips.decorator package to list of exported packages in
  plugin.

Version 0.5.0
* ScalePrint - wrapper that scales a print down to fit on the page, or scales
  larger or smaller depending on a scaling factor.  Requires SWT 3.2M3 or
  later.
* RotatePrint - wrapper that rotates the target by 90, 180, or 270 degrees.
  Since SWT doesn't provide API for setting the page orientation, this will be
  very useful for landscape layouts.  Requires SWT 3.2M3 or later.
* BackgroundPrint - wrapper that draws a background color behind it's target.
* BigPrint - wrapper that splits it's target across multiple pages if it's too
  large to fit on one.  Use this if you have a document that's too big to
  print (i.e. a GridPrint with too many columns).
* Decorator package (net.sf.paperclips.decorator) allows you to create
  decorator factories which can apply decorations to prints without explicitly
  calling the decorator print's constructor.  Provided you use the decorator
  uniformly throughout your document, the style of the document can be changed
  by substituting another decorator.
* TextPrint default font is the system default font instead of hard-coded
  "Times" font.
* Updated semantics of PrintPiece.dispose() to allow PrintPiece and
  BorderPainter re-use.  Anybody who writes their own Print classes should
  check out the javadocs for this method and update their code to comply with
  the new semantics.
* GridPrint got a massive overhaul:
  * Can now add headers and footers that repeat on every page through the
    addHeader(...) and addFooter(...) methods (they work just like the
    add(...) methods).
  * Configure the appearance of your GridPrint using the GridLook interface.
    A default look, DefaultGridLook, lets you configure the cell spacing, cell
    border, and background color of grid cells (separate color for header,
    body, and footer cells).
  * Public fields horizontalSpacing and verticalSpacing were deprecated.
  * Fixed bug 1480013: illogical layout of grid rows when they are broken
    across pages.  Sometimes some content would be on the end of one page and
    the other content would be at the beginning of the next page.  This led to
    sometimes confusing printouts.  This fix essentially "glues" the row
    together so it doesn't get separated like this any more.

Version 0.4.3
* Bugfix: Whenever the print space available to a GridPrint was smaller than
  it's calculated minimum size, the grid would print larger than the available
  space, in certain cases. 

Version 0.4.2
* NoBreakPrint is a wrapper which prevents it's target print from being broken
  up between pages (or columns). 
* BreakPrint adds a page break or column break. 
* PaperClips sources are now version controlled through Subversion (finally!).

Version 0.4.1
* Bugfix: if a GridPrint is configured with a cell border and added to a
  ColumnPrint, an infinite loop will occur when attempting to print. 

Version 0.4.0
* All public API are documented in javadocs. 
* Custom cell borders in GridPrint - uses the same Border interface as
  BorderPrint.

Version 0.3 beta
* AlignPrint - vertical and horizontal alignment of a child print.
* ColumnPrint - lays out a child print into multiple columns.
* GapBorder - a blank border with configurable margin size (see API docs for
  BorderPrint)

Version 0.2 alpha
* PagePrint - page headers and footers (including page numbering)
* BorderPrint - decorating document elements with borders.
* LayerPrint - a layout element which renders document elements one above the
  other.

Version 0.1 alpha
Basic document elements:
* TextPrint - for printing text
* ImagePrint - for printing images
* LinePrint - for printing horizontal and (sometimes) vertical rules.
* GridPrint - arranges it's child prints into a grid.
* LayerPrint - displays it's child prints on top of eachother.
* SeriesPrint - displays multiple prints, one after another, with only one to
  a page.
* FactoryPrint - aids in composition of Prints.